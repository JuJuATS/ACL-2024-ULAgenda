<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <link rel="stylesheet" href="css/planning/style.css">
    <%- include('./partials/head', {pageName: "planning"}); %>
    
    <!-- fullcalendar bundle -->
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js'></script>
    
    <!-- rrule lib -->
    <script src='https://cdn.jsdelivr.net/npm/rrule@2.6.4/dist/es5/rrule.min.js'></script>
    <!-- the rrule-to-fullcalendar connector. must go AFTER the rrule lib -->
    <script src='https://cdn.jsdelivr.net/npm/@fullcalendar/rrule@6.1.15/index.global.min.js'></script>
  </head>
  <body>
    <header>
      <%- include('./partials/header', {user: user}); %>
  </header>
  
    <div class="container">
      <div class="sideBar">
        <p style="
          font-size: 20px;
          color: #00BBEC;
          text-align: center;
          margin-bottom: 20px;
          border-bottom: 2px solid #00BBEC;
          white-space:nowrap;
          padding-bottom: 10px;">Agenda</p>
        <ul class="listAgenda"></ul>
      </div>
      <div>
        <input type="checkbox" role="button" aria-label="Display the menu" class="menu">
      </div>
      <div id='calendar'></div>
    </div>
    <script>
      const agendas = []
      function showTooltip(eventRect, event,size) {
        var tooltip = document.getElementById('event-tooltip') || 
                 document.createElement('div');
        tooltip.id = 'event-tooltip';
        tooltip.style.position = 'absolute';
        tooltip.style = `
                  position:absolute;
                  top:${(eventRect.top)}px;
                  left:${eventRect.left}px;
                  border:2px solid black;
                  background:#3788d8;
                  z-index:999999;
                  transform:translateY(-100%);
            `
            const startHour = (event.start.getHours() <10 ? "0":"") + event.start.getHours()
            const startMinutes = (event.start.getMinutes() <10 ? "0":"") + event.start.getMinutes()
            const startSecondes = (event.start.getSeconds() <10 ? "0":"") + event.start.getSeconds()
            const endHour = (event.end.getHours() <10 ? "0":"") + event.end.getHours()
            const endMinutes = (event.end.getMinutes() <10 ? "0":"") + event.end.getMinutes()
            const endSecondes = (event.end.getSeconds() <10 ? "0":"") + event.end.getSeconds()
            tooltip.innerText = `${event.title}
              ${startHour}:${startMinutes}:${startSecondes} - ${endHour}:${endMinutes}:${endSecondes}
              ${event.extendedProps.description}
            `
            

    if (!document.getElementById('event-tooltip')) {
      document.body.appendChild(tooltip);
    }
  }
      document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
          eventSources:[
            async(info,success,fail)=>{
                let events = []
                for(agenda in agendas){

                  if(agendas[agenda].visible){
                    events = [...events,...agendas[agenda].event]
                    
                  }
                }
                
                return events;
            }
          ],
          timeZone:"UTC",
          allDaySlot:false,
          nowIndicator:true,
          height:"100%",
          initialView: 'timeGridWeek',
          dayHeaderFormat:{ weekday: 'short'},
           locale: 'fr',
           firstDay:1,
           headerToolbar:{
            start:'title',
            center:"timeGridWeek,dayGridMonth",
            end:'today prev,next'
           },
           buttonText:{
              today:"Aujourd'hui",
              week:"semaine",
              month:"mois"
           },
           displayEventEnd:true,
           eventMouseEnter:(mouseInfo)=>{
            let eventRect = mouseInfo.el.getBoundingClientRect();
            let size = {width:mouseInfo.el.offsetWidth,height:mouseInfo.el.offsetHeight}
            showTooltip(eventRect, mouseInfo.event,size);
           },
           eventMouseLeave:(mouseLeaveInfo)=>{
              const popup = document.querySelector("#event-tooltip")
              popup.remove()
           }
        });
        
        const sideBar = document.querySelector(".sideBar");
        calendar.render();
        const menu = document.querySelector(".menu");
        menu.addEventListener("click",()=>{
          sideBar.classList.toggle("sideBar-open");
          setTimeout(()=>{
            calendar.updateSize();
          },1000)
        })
        const listAgenda = document.querySelector(".listAgenda");
      const generateAgenda = (element,calendar)=>{
          const agenda = document.createElement("li")
          const checkbox = document.createElement("input");
          checkbox.type = "checkbox"
          checkbox.classList.add("checkAgenda");
          checkbox.style ="width:30px"
          checkbox.name = `${element.name}`
          checkbox.dataset.id = element._id
          checkbox.addEventListener("change",(el)=>{
            refetch(el.target,calendar)
          })
         const divcheckbox = document.createElement("div")
         divcheckbox.style = "display:flex;flex-direction:row;padding-left:20px;gap:20px;width:50%;justify-content:space-between"
         const label = document.createElement("label");
         label.style = "font-size:1.2em"
         label.for = `agenda-${element.name}`
         label.innerText = `${element.name}`
         divcheckbox.appendChild(label)
         divcheckbox.appendChild(checkbox)
         agenda.appendChild(divcheckbox)
         listAgenda.appendChild(agenda) 
         
      }
      const refetch = async (el,calendar)=>{
      
          if(el.checked){
            if(!agendas[el.dataset.id]){
             const data = await fetch(`/api/getDate?agenda=${el.dataset.id}`).then(res=>res.json())
             agendas[el.dataset.id]={event:data.event,visible:true}
            }
            else{
              agendas[el.dataset.id].visible =true;
            }
            
          }
          else{
              agendas[el.dataset.id].visible = false;
            }
          
          calendar.refetchEvents()
        
          
      }
      fetch("/api/getAgenda").then(res=>res.json()).then(data=>data.forEach(element => {
        
        generateAgenda(element,calendar)
      }))
      });

    </script>
  </body>
</html>